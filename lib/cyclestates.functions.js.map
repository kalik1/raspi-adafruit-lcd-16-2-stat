{"version":3,"sources":["../src/cyclestates.functions.js"],"names":["CYCLE_STATES","currentCiclyngState","looping","cyclingPromise","_lcd","preventHang","initCycleState","lcd","nextState","length","nextStateName","printInternalIp","forceExternalIp","internalIpv4","internalIp","v4","catch","err","console","error","internalHostname","os","hostname","message","printExternalIp","externalIpv4","country","city","ip","printCpuRam","cpuUsage","osu","cpu","usage","ramPct","toFixed","printDisk","diskUsage","drive","info","freeGb","usedPercentage","cycleStates","setState","startCycleStates","stopCycleStates","stateName"],"mappings":"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","sourcesContent":["'use strict';\n\nimport getExternalIpAndInfos from './ip.functions';\nimport osu from 'node-os-utils';\nimport os from 'os';\nimport { hostname, cpus, totalmem, freemem } from 'os';\nimport internalIp from 'internal-ip';\nimport {sleep} from './helpers.function'\nconst CYCLE_STATES = ['cpuram', 'disk', 'internalIp', 'externalIp'];\n\nlet currentCiclyngState = 0;\nlet looping = false;\nlet cyclingPromise = null;\nlet _lcd;\nlet preventHang= false;\n\nexport function initCycleState({lcd}) {\n  _lcd = lcd\n}\nfunction nextState() {\n  return (currentCiclyngState++) %(CYCLE_STATES.length)\n}\n\nfunction nextStateName() {\n  return CYCLE_STATES[ (currentCiclyngState + 1) %(CYCLE_STATES.length)]\n}\n\nasync function printInternalIp(forceExternalIp = false) {\n  const internalIpv4 = await internalIp.v4().catch(err => console.error(err));\n  const internalHostname = os.hostname();\n  _lcd.message(`${internalHostname}\\n${internalIpv4}`, true);\n}\n\nasync function printExternalIp(forceExternalIp = false) {\n  const externalIpv4 = await getExternalIpAndInfos().catch(err => console.error(err));\n  _lcd.message(`${externalIpv4.country}(${externalIpv4.city})\\n${externalIpv4.ip}`, true);\n}\n\nasync function printCpuRam() {\n  //const {avgIdle, avgTotal} = await osu.cpu.average();  \n  //const cpuUsage = (1-(avgIdle/avgTotal))*100;\n  const cpuUsage = await osu.cpu.usage();\n  const ramPct = (freemem()/totalmem()*100);\n  _lcd.message(`CPU: ${cpuUsage.toFixed(2)}%\\nUsed RAM: ${ramPct.toFixed(2)}%`, true);\n}\n\nasync function printDisk() {\n  const diskUsage = await osu.drive.info();\n  _lcd.message(`Free Disk: ${diskUsage.freeGb}GB\\nUsed Disk: ${diskUsage.usedPercentage}%`, true);\n}\n\nasync function cycleStates() {\n  looping = true;\n  while(looping) {\n    if (!preventHang) {\n      await setState(CYCLE_STATES[nextState()]);\n      await sleep(5000)\n    }\n  preventHang = false;\n  }  \n} \n\nexport function startCycleStates() {\n  cyclingPromise = cycleStates();\n}\n\nexport async function stopCycleStates() {\n  looping = false;\n  preventHang = true;\n  await cyclingPromise;\n  cyclingPromise = null;\n};\n\nexport async function setState(stateName) {\n  switch(stateName) {\n    case 'cpuram':\n      await printCpuRam()\n      break;\n    case 'internalIp':\n      await printInternalIp()\n      break; \n    case 'externalIp':\n      await printExternalIp()\n      break; \n    case 'disk':\n      await printDisk()\n      break;\n    default:\n      console.error('Requested Unknown State')\n    }\n}"],"file":"cyclestates.functions.js"}
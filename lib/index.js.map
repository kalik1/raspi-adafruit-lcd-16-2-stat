{"version":3,"sources":["../src/index.js"],"names":["CYCLE_STATES","EXTERNAL_IP_CALCTIME","sleep","ms","Promise","r","setTimeout","lcd","LcdPlate","currentCiclyngState","lastState","looping","oldIp","lastIpCalculationTime","setup","backlight","colors","RED","message","getExternalIp","Date","now","resolve","reject","http","get","res","statusCode","contentType","headers","error","Error","test","console","resume","setEncoding","rawData","on","chunk","parsedData","JSON","parse","e","nextState","length","nextStateName","printState","stateName","printCpuRam","printIp","printDisk","cycleStates","forceExternalIp","internalIpv4","internalIp","v4","catch","err","externalIpv4","ip","cpuUsage","osu","cpu","usage","ramPct","toFixed","diskUsage","drive","info","freeGb","usedPercentage","button","buttonName","clear"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,YAAY,GAAG,CAAC,QAAD,EAAW,MAAX,EAAmB,IAAnB,CAArB;AACA,MAAMC,oBAAoB,GAAG,KAAK,EAAL,GAAU,IAAvC,C,CAA6C;;AAC7C,MAAMC,KAAK,GAAGC,EAAE,IAAI,IAAIC,OAAJ,CAAYC,CAAC,IAAIC,UAAU,CAAC,MAAMD,CAAC,EAAR,EAAYF,EAAZ,CAA3B,CAApB;;AACA,MAAMI,GAAG,GAAG,IAAIC,qBAAJ,CAAa,CAAb,EAAgB,IAAhB,CAAZ;AAEA,IAAIC,mBAAJ;AACA,IAAIC,SAAJ;AACA,IAAIC,OAAJ;AACA,IAAIC,KAAJ;AACA,IAAIC,qBAAJ;;AAEA,SAASC,KAAT,GAAiB;AACfL,EAAAA,mBAAmB,GAAG,CAAtB;AACAC,EAAAA,SAAS,GAAG,IAAZ;AACAC,EAAAA,OAAO,GAAG,KAAV;AACAC,EAAAA,KAAK,GAAG,IAAR;AACAL,EAAAA,GAAG,CAACQ,SAAJ,CAAcR,GAAG,CAACS,MAAJ,CAAWC,GAAzB;AACAV,EAAAA,GAAG,CAACW,OAAJ,CAAY,mCAAZ;AACD;;AAED,SAASC,aAAT,GAAyB;AACvB,MAAIP,KAAK,IAAIC,qBAAT,IAAmCO,IAAI,CAACC,GAAL,KAAaR,qBAAd,GAAuCZ,oBAA7E,EAAmG,OAAOW,KAAP;AACnG,SAAO,IAAIR,OAAJ,CAAY,CAACkB,OAAD,EAASC,MAAT,KAAoB;AACrCC,kBAAKC,GAAL,CAAS,yBAAT,EAAqCC,GAAD,IAAS;AAC3C,YAAM;AAAEC,QAAAA;AAAF,UAAiBD,GAAvB;AACA,YAAME,WAAW,GAAGF,GAAG,CAACG,OAAJ,CAAY,cAAZ,CAApB;AAEA,UAAIC,KAAJ;;AACA,UAAIH,UAAU,KAAK,GAAnB,EAAwB;AACtBG,QAAAA,KAAK,GAAG,IAAIC,KAAJ,CAAU,sBACC,gBAAeJ,UAAW,EADrC,CAAR;AAED,OAHD,MAGO,IAAI,CAAC,qBAAqBK,IAArB,CAA0BJ,WAA1B,CAAL,EAA6C;AAClDE,QAAAA,KAAK,GAAG,IAAIC,KAAJ,CAAU,4BACC,0CAAyCH,WAAY,EADhE,CAAR;AAED;;AACD,UAAIE,KAAJ,EAAW;AACTG,QAAAA,OAAO,CAACH,KAAR,CAAcA,KAAK,CAACZ,OAApB,EADS,CAET;;AACAQ,QAAAA,GAAG,CAACQ,MAAJ;AACA;AACD;;AAEDR,MAAAA,GAAG,CAACS,WAAJ,CAAgB,MAAhB;AACA,UAAIC,OAAO,GAAG,EAAd;AACAV,MAAAA,GAAG,CAACW,EAAJ,CAAO,MAAP,EAAgBC,KAAD,IAAW;AAAEF,QAAAA,OAAO,IAAIE,KAAX;AAAmB,OAA/C;AACAZ,MAAAA,GAAG,CAACW,EAAJ,CAAO,KAAP,EAAc,MAAM;AAClB,YAAI;AACF,gBAAME,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWL,OAAX,CAAnB,CADE,CAEF;;AACAvB,UAAAA,qBAAqB,GAAGO,IAAI,CAACC,GAAL,EAAxB;AACAC,UAAAA,OAAO,CAACiB,UAAD,CAAP;AACD,SALD,CAKE,OAAOG,CAAP,EAAU;AACVT,UAAAA,OAAO,CAACH,KAAR,CAAcY,CAAC,CAACxB,OAAhB;AACAK,UAAAA,MAAM,CAACmB,CAAC,CAACxB,OAAH,CAAN;AACD;AACF,OAVD;AAWD,KAjCD,EAiCGmB,EAjCH,CAiCM,OAjCN,EAiCgBK,CAAD,IAAO;AACpB;AACAnB,MAAAA,MAAM,CAACmB,CAAC,CAACxB,OAAF,IAAawB,CAAd,CAAN;AACD,KApCD;AAqCD,GAtCM,CAAP;AAuCD;;AAED,SAASC,SAAT,GAAqB;AACnB,SAAQlC,mBAAmB,EAApB,GAA0BT,YAAY,CAAC4C,MAA9C;AACD;;AAED,SAASC,aAAT,GAAyB;AACvB,SAAO7C,YAAY,CAAE,CAACS,mBAAmB,GAAG,CAAvB,IAA4BT,YAAY,CAAC4C,MAA3C,CAAnB;AACD;;AAED,eAAeE,UAAf,CAA0BC,SAA1B,EAAqC;AACnC,UAAOA,SAAP;AACE,SAAK,QAAL;AACE,YAAMC,WAAW,EAAjB;AACF;;AACC,SAAK,IAAL;AACC,YAAMC,OAAO,EAAb;AACF;;AACA,SAAK,MAAL;AACE,YAAMC,SAAS,EAAf;AACF;;AACA;AACEjB,MAAAA,OAAO,CAACH,KAAR,CAAc,yBAAd;AAXJ;AAaD;;AAED,eAAeqB,WAAf,GAA6B;AAC3BxC,EAAAA,OAAO,GAAG,IAAV;;AACA,SAAMA,OAAN,EAAe;AACb,UAAMmC,UAAU,CAAC9C,YAAY,CAAC2C,SAAS,EAAV,CAAb,CAAhB;AACA,UAAMzC,KAAK,CAAC,IAAD,CAAX;AACD;AACF;;AAED,eAAe+C,OAAf,CAAuBG,eAAe,GAAG,KAAzC,EAAgD;AAC9C,QAAMC,YAAY,GAAG,MAAMC,oBAAWC,EAAX,GAAgBC,KAAhB,CAAsBC,GAAG,IAAIxB,OAAO,CAACH,KAAR,CAAc2B,GAAd,CAA7B,CAA3B;AACA,QAAMC,YAAY,GAAG,MAAMvC,aAAa,GAAGqC,KAAhB,CAAsBC,GAAG,IAAIxB,OAAO,CAACH,KAAR,CAAc2B,GAAd,CAA7B,CAA3B;AACAlD,EAAAA,GAAG,CAACW,OAAJ,CAAa,GAAEmC,YAAa,KAAIK,YAAY,CAACC,EAAG,EAAhD,EAAmD,IAAnD;AACD;;AAED,eAAeX,WAAf,GAA6B;AAC3B;AACA;AACA,QAAMY,QAAQ,GAAG,MAAMC,qBAAIC,GAAJ,CAAQC,KAAR,EAAvB;AACA,QAAMC,MAAM,GAAI,qBAAU,mBAAV,GAAqB,GAArC;AACAzD,EAAAA,GAAG,CAACW,OAAJ,CAAa,QAAO0C,QAAQ,CAACK,OAAT,CAAiB,CAAjB,CAAoB,iBAAgBD,MAAM,CAACC,OAAP,CAAe,CAAf,CAAkB,GAA1E,EAA8E,IAA9E;AACD;;AAED,eAAef,SAAf,GAA2B;AACzB,QAAMgB,SAAS,GAAG,MAAML,qBAAIM,KAAJ,CAAUC,IAAV,EAAxB;AACA7D,EAAAA,GAAG,CAACW,OAAJ,CAAa,cAAagD,SAAS,CAACG,MAAO,cAAaH,SAAS,CAACI,cAAe,GAAjF,EAAqF,IAArF;AACD;;AAED/D,GAAG,CAAC8B,EAAJ,CAAO,eAAP,EAAwB,gBAAekC,MAAf,EAAuB;AAC7C5D,EAAAA,OAAO,GAAG,KAAV;;AACA,UAAQJ,GAAG,CAACiE,UAAJ,CAAeD,MAAf,CAAR;AACE,SAAK,MAAL;AACE,UAAI7D,SAAS,KAAK,MAAlB,EAA0B;AACxBA,QAAAA,SAAS,GAAG,MAAZ;AACAH,QAAAA,GAAG,CAACkE,KAAJ;AACD;;AACDtB,MAAAA,WAAW;AACX;;AACF,SAAK,QAAL;AACE,UAAIzC,SAAS,KAAK,MAAlB,EAA0B;AACxBA,QAAAA,SAAS,GAAG,MAAZ;AACAH,QAAAA,GAAG,CAACkE,KAAJ;AACD;;AACD3B,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA;;AACF,SAAK,IAAL;AACE,UAAIpC,SAAS,KAAK,IAAlB,EAAwB;AACtBA,QAAAA,SAAS,GAAG,IAAZ;AAAiB;AAClB;;AACDoC,MAAAA,UAAU,CAAC,QAAD,CAAV;AACA;;AACF,SAAK,MAAL;AACE,UAAIpC,SAAS,KAAK,MAAlB,EAA0B;AACxBA,QAAAA,SAAS,GAAG,MAAZ;AAAmB;AACpB;;AACDoC,MAAAA,UAAU,CAAC,MAAD,CAAV;AACA;;AACF;AACEvC,MAAAA,GAAG,CAACW,OAAJ,CAAY,sBAAsBX,GAAG,CAACiE,UAAJ,CAAeD,MAAf,CAAlC;AA5BJ,GAF6C,CAgC7C;;AACD,CAjCD;AAmCAzD,KAAK;AACLqC,WAAW","sourcesContent":["import internalIp from 'internal-ip';\nimport http from 'http';\nimport osu from 'node-os-utils';\nimport dns from 'dns';\nimport { hostname, cpus, totalmem, freemem } from 'os';\nimport { plate as LcdPlate } from 'adafruit-i2c-lcd';\n\nconst CYCLE_STATES = ['cpuram', 'disk', 'ip'];\nconst EXTERNAL_IP_CALCTIME = 60 * 60 * 1000; // 1hour in ms\nconst sleep = ms => new Promise(r => setTimeout(() => r(), ms))\nconst lcd = new LcdPlate(1, 0x20);\n\nlet currentCiclyngState;\nlet lastState;\nlet looping;\nlet oldIp;\nlet lastIpCalculationTime;\n\nfunction setup() {\n  currentCiclyngState = 0;\n  lastState = null;\n  looping = false;\n  oldIp = null;\n  lcd.backlight(lcd.colors.RED);\n  lcd.message('LCD Status - By \\n Giorgio Pillon');\n}\n \nfunction getExternalIp() {\n  if (oldIp && lastIpCalculationTime && (Date.now() - lastIpCalculationTime) < EXTERNAL_IP_CALCTIME) return oldIp;\n  return new Promise((resolve,reject) => {\n    http.get('http://ipconfig.io/json', (res) => {\n      const { statusCode } = res;\n      const contentType = res.headers['content-type'];\n    \n      let error;\n      if (statusCode !== 200) {\n        error = new Error('Request Failed.\\n' +\n                          `Status Code: ${statusCode}`);\n      } else if (!/^application\\/json/.test(contentType)) {\n        error = new Error('Invalid content-type.\\n' +\n                          `Expected application/json but received ${contentType}`);\n      }\n      if (error) {\n        console.error(error.message);\n        // Consume response data to free up memory\n        res.resume();\n        return;\n      }\n    \n      res.setEncoding('utf8');\n      let rawData = '';\n      res.on('data', (chunk) => { rawData += chunk; });\n      res.on('end', () => {\n        try {\n          const parsedData = JSON.parse(rawData);\n          //console.log(parsedData);\n          lastIpCalculationTime = Date.now();\n          resolve(parsedData)\n        } catch (e) {\n          console.error(e.message);\n          reject(e.message)\n        }\n      });\n    }).on('error', (e) => {\n      //console.error(`Got error: ${e.message}`);\n      reject(e.message || e)\n    });\n  });    \n}\n\nfunction nextState() {\n  return (currentCiclyngState++) %(CYCLE_STATES.length)\n}\n\nfunction nextStateName() {\n  return CYCLE_STATES[ (currentCiclyngState + 1) %(CYCLE_STATES.length)]\n}\n\nasync function printState(stateName) {\n  switch(stateName) {\n    case 'cpuram':\n      await printCpuRam()\n    break;\n     case 'ip':\n      await printIp()\n    break; \n    case 'disk':\n      await printDisk()\n    break;\n    default:\n      console.error('Requested Unknown State')\n    }\n}\n\nasync function cycleStates() {\n  looping = true;\n  while(looping) {\n    await printState(CYCLE_STATES[nextState()]);\n    await sleep(5000)\n  }  \n} \n\nasync function printIp(forceExternalIp = false) {\n  const internalIpv4 = await internalIp.v4().catch(err => console.error(err));\n  const externalIpv4 = await getExternalIp().catch(err => console.error(err));\n  lcd.message(`${internalIpv4}\\n${externalIpv4.ip}`, true);\n}\n\nasync function printCpuRam() {\n  //const {avgIdle, avgTotal} = await osu.cpu.average();\n  //const cpuUsage = (1-(avgIdle/avgTotal))*100;\n  const cpuUsage = await osu.cpu.usage();\n  const ramPct = (freemem()/totalmem()*100);\n  lcd.message(`CPU: ${cpuUsage.toFixed(2)}%\\n Used Mem: ${ramPct.toFixed(2)}%`, true);\n}\n\nasync function printDisk() {\n  const diskUsage = await osu.drive.info();\n  lcd.message(`Free Disk: ${diskUsage.freeGb}GB\\nUsed : ${diskUsage.usedPercentage}%`, true);\n}\n \nlcd.on('button_change', async function(button) {\n  looping = false;\n  switch (lcd.buttonName(button)) {\n    case 'DOWN':\n      if (lastState !== 'DOWN') {\n        lastState = 'DOWN';\n        lcd.clear(); \n      }\n      cycleStates();\n      break;\n    case 'SELECT':\n      if (lastState !== 'DOWN') {\n        lastState = 'DOWN';\n        lcd.clear(); \n      }\n      printState('ip');\n      break;\n    case 'UP':\n      if (lastState !== 'UP') {\n        lastState = 'UP';; \n      }\n      printState('cpuram');\n      break;\n    case 'LEFT':\n      if (lastState !== 'LEFT') {\n        lastState = 'LEFT';; \n      }\n      printState('disk');\n      break;\n    default:\n      lcd.message('Button changed:\\n' + lcd.buttonName(button));\n  }\n  //lcd.message('Button changed:\\n' + lcd.buttonName(button));\n});\n\nsetup();\ncycleStates();"],"file":"index.js"}
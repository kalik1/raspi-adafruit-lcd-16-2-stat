{"version":3,"sources":["../src/ip.functions.js"],"names":["EXTERNAL_IP_CALCTIME","oldIp","lastIpCalculationTime","getExternalIpAndInfos","forceRecalc","Promise","resolve","reject","Date","now","http","get","res","statusCode","contentType","headers","error","Error","test","console","message","resume","setEncoding","rawData","on","chunk","parsedData","JSON","parse","e"],"mappings":"AAAA;;;;;;;AAGA;;;;AACA,MAAMA,oBAAoB,GAAG,KAAK,EAAL,GAAU,IAAvC,C,CAA6C;;AAC7C,IAAIC,KAAK,GAAG,IAAZ;AACA,IAAIC,qBAAqB,GAAG,IAA5B;;AAEe,SAASC,qBAAT,CAA+BC,WAAW,GAAG,KAA7C,EAAoD;AACjE,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAoB;AACnC,QAAI,CAACH,WAAD,IAAgBH,KAAhB,IAAyBC,qBAAzB,IAAmDM,IAAI,CAACC,GAAL,KAAaP,qBAAd,GAAuCF,oBAA7F,EAAmH;AACnH;AACA;AACA,aAAOM,OAAO,CAACL,KAAD,CAAd;AACD;;AACDS,kBAAKC,GAAL,CAAS,yBAAT,EAAqCC,GAAD,IAAS;AAC3C,YAAM;AAAEC,QAAAA;AAAF,UAAiBD,GAAvB;AACA,YAAME,WAAW,GAAGF,GAAG,CAACG,OAAJ,CAAY,cAAZ,CAApB;AAEA,UAAIC,KAAJ;;AACA,UAAIH,UAAU,KAAK,GAAnB,EAAwB;AACtBG,QAAAA,KAAK,GAAG,IAAIC,KAAJ,CAAU,sBACC,gBAAeJ,UAAW,EADrC,CAAR;AAED,OAHD,MAGO,IAAI,CAAC,qBAAqBK,IAArB,CAA0BJ,WAA1B,CAAL,EAA6C;AAClDE,QAAAA,KAAK,GAAG,IAAIC,KAAJ,CAAU,4BACC,0CAAyCH,WAAY,EADhE,CAAR;AAED;;AACD,UAAIE,KAAJ,EAAW;AACTG,QAAAA,OAAO,CAACH,KAAR,CAAcA,KAAK,CAACI,OAApB,EADS,CAET;;AACAR,QAAAA,GAAG,CAACS,MAAJ;AACA;AACD;;AAEDT,MAAAA,GAAG,CAACU,WAAJ,CAAgB,MAAhB;AACA,UAAIC,OAAO,GAAG,EAAd;AACAX,MAAAA,GAAG,CAACY,EAAJ,CAAO,MAAP,EAAgBC,KAAD,IAAW;AAAEF,QAAAA,OAAO,IAAIE,KAAX;AAAmB,OAA/C;AACAb,MAAAA,GAAG,CAACY,EAAJ,CAAO,KAAP,EAAc,MAAM;AAClB,YAAI;AACF,gBAAME,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWL,OAAX,CAAnB,CADE,CAEF;;AACArB,UAAAA,qBAAqB,GAAGM,IAAI,CAACC,GAAL,EAAxB;AACAR,UAAAA,KAAK,GAAGyB,UAAR;AACApB,UAAAA,OAAO,CAACoB,UAAD,CAAP;AACD,SAND,CAME,OAAOG,CAAP,EAAU;AACVV,UAAAA,OAAO,CAACH,KAAR,CAAca,CAAC,CAACT,OAAhB;AACAb,UAAAA,MAAM,CAACsB,CAAC,CAACT,OAAH,CAAN;AACD;AACF,OAXD;AAYD,KAlCD,EAkCGI,EAlCH,CAkCM,OAlCN,EAkCgBK,CAAD,IAAO;AACpB;AACAtB,MAAAA,MAAM,CAACsB,CAAC,CAACT,OAAF,IAAaS,CAAd,CAAN;AACD,KArCD;AAsCD,GA5CM,CAAP;AA6CD","sourcesContent":["'use strict';\n\n\nimport http from 'http';\nconst EXTERNAL_IP_CALCTIME = 60 * 60 * 1000; // 1hour in ms\nlet oldIp = null;\nlet lastIpCalculationTime = null;\n\nexport default function getExternalIpAndInfos(forceRecalc = false) {\n  return new Promise((resolve,reject) => {\n      if (!forceRecalc && oldIp && lastIpCalculationTime && (Date.now() - lastIpCalculationTime) < EXTERNAL_IP_CALCTIME) {\n      //console.log('using cached:')\n      //console.log(oldIp);\n      return resolve(oldIp);\n    }\n    http.get('http://ipconfig.io/json', (res) => {\n      const { statusCode } = res;\n      const contentType = res.headers['content-type'];\n    \n      let error;\n      if (statusCode !== 200) {\n        error = new Error('Request Failed.\\n' +\n                          `Status Code: ${statusCode}`);\n      } else if (!/^application\\/json/.test(contentType)) {\n        error = new Error('Invalid content-type.\\n' +\n                          `Expected application/json but received ${contentType}`);\n      }\n      if (error) {\n        console.error(error.message);\n        // Consume response data to free up memory\n        res.resume();\n        return;\n      }\n    \n      res.setEncoding('utf8');\n      let rawData = '';\n      res.on('data', (chunk) => { rawData += chunk; });\n      res.on('end', () => {\n        try {\n          const parsedData = JSON.parse(rawData);\n          //console.log(parsedData);\n          lastIpCalculationTime = Date.now();\n          oldIp = parsedData;\n          resolve(parsedData)\n        } catch (e) {\n          console.error(e.message);\n          reject(e.message)\n        }\n      });\n    }).on('error', (e) => {\n      //console.error(`Got error: ${e.message}`);\n      reject(e.message || e)\n    });\n  });    \n}"],"file":"ip.functions.js"}